* Startup
** performance
   #+begin_src emacs-lisp
     ;; The default is 800 kilobytes.  Measured in bytes.
     ;; (setq gc-cons-threshold (* 50 1000 1000))
     (setq read-process-output-max (* 1024 1024)) ;; 1mb
     (defun efs/display-startup-time ()
       (message "Emacs loaded in %s with %d garbage collections."
                (format "%.2f seconds"
                        (float-time
                         (time-subtract after-init-time before-init-time)))
                gcs-done))

     (add-hook 'emacs-startup-hook #'efs/display-startup-time)

     #+end_src
   

* Interaction
** UI
#+begin_src emacs-lisp
    (tool-bar-mode -1) ; tool bar
    (menu-bar-mode -1) ; menu bar
    (scroll-bar-mode -1) ; scroll bar
    (global-display-line-numbers-mode) ; line numbers
    (show-paren-mode 1) ; highlights brackets
    (electric-pair-mode 1) ; auto pair
    (setq tab-width 2) 
    (setq tab-always-indent 'complete)
    (setq-default cursor-type 'box) 
    (setq show-paren-style 'mixed) ; style of bracket highlights
    (setq scroll-conservatively 100) ; smooth scroll
    (setq ring-bell-function 'ignore) ; no annoying sound
    (when window-system (global-hl-line-mode t)) ; colour current line
    (when window-system (global-prettify-symbols-mode t)) ; symbols in gui
    (setq org-startup-indented t)
    (setq org-startup-folded t)
#+end_src

** Shortcuts
   
# OPENS TERMINAL
#+begin_src emacs-lisp
  (global-set-key (kbd "<s-return>") 'ansi-term) ; super + enter for terminal
  (defalias 'yes-or-no-p 'y-or-n-p) ; y or n for confirmation
#+end_src

** IDO
   #+begin_src emacs-lisp
     (setq ido-enable-flex-matching nil)
     (setq ido-create-new-buffer 'always)
     (setq ido-everywhere t)
     (ido-mode 1)
     (global-set-key (kbd "C-x b") 'ibuffer)
     (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
   #+end_src
   
   
* Dashboard
** dashboard install
   #+begin_src emacs-lisp
     (use-package dashboard
       :ensure t
       :config
       (dashboard-setup-startup-hook))
   #+end_src

** Configuration
   #+begin_src emacs-lisp
     ;; Set the title
     (setq dashboard-banner-logo-title "GNU Mikoto Emacs")
     ;; Set the banner
     (setq dashboard-startup-banner "~/.emacs.d/splash/emacs.png")
     ;; Value can be
     ;; 'official which displays the official emacs logo
     ;; 'logo which displays an alternative emacs logo
     ;; 1, 2 or 3 which displays one of the text banners
     ;; "path/to/your/image.png" or "path/to/your/text.txt" which displays whatever image/text you would prefer

     ;; Content is not centered by default. To center, set
     (setq dashboard-center-content t)

     ;; To disable shortcut "jump" indicators for each section, set
     (setq dashboard-show-shortcuts t)

     (setq dashboard-set-file-icons t)
     (setq dashboard-items '((recents  . 5)
                             (bookmarks . 5)
                             (projects . 5)
                             (agenda . 5)
                             (registers . 5)))
   #+end_src


* Packages
** nord-theme
#+begin_src emacs-lisp
  (use-package nord-theme
    :ensure t
    :config
    (load-theme 'nord t)
    (setq nord-region-highlight "snowstorm")
    (setq nord-uniform-mode-lines t))
#+end_src
** doom-modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :config
    (doom-modeline-mode 1))
#+end_src
** solitare-mode
#+begin_src emacs-lisp
  (use-package solaire-mode
    :ensure t
    :config
    (solaire-global-mode +1))
#+end_src
** which-key
   #+begin_src emacs-lisp
     (use-package which-key
       :ensure t
       :init
       (which-key-mode))
   #+end_src

** org-bullets
   
   #+begin_src emacs-lisp
     (use-package org-bullets
	    :ensure t
	    :config
	    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
   #+end_src

** vertical-ido
   #+begin_src emacs-lisp
     (use-package ido-vertical-mode
       :ensure t
       :init
       (ido-vertical-mode 1))
     (setq ido-vertical-define-keys 'C-n-and-C-p-only)
   #+end_src
   
** avy
#+begin_src emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+end_src
** rustic
   #+begin_src emacs-lisp
     (use-package rustic
       :ensure
       :bind (:map rustic-mode-map
                   ("M-j" . lsp-ui-imenu)
                   ("M-?" . lsp-find-references)
                   ("C-c C-c l" . flycheck-list-errors)
                   ("C-c C-c a" . lsp-execute-code-action)
                   ("C-c C-c r" . lsp-rename)
                   ("C-c C-c q" . lsp-workspace-restart)
                   ("C-c C-c Q" . lsp-workspace-shutdown)
                   ("C-c C-c s" . lsp-rust-analyzer-status))
       :config
       ;; uncomment for less flashiness
       ;; (setq lsp-eldoc-hook nil)
       ;; (setq lsp-enable-symbol-highlighting nil)
       ;; (setq lsp-signature-auto-activate nil)

       ;; comment to disable rustfmt on save
       (setq rustic-format-on-save t)
       (add-hook 'rustic-mode-hook 'rk/rustic-mode-hook))

     (defun rk/rustic-mode-hook ()
       ;; so that run C-c C-c C-r works without having to confirm, but don't try to
       ;; save rust buffers that are not file visiting. Once
       ;; https://github.com/brotzeit/rustic/issues/253 has been resolved this should
       ;; no longer be necessary.
       (when buffer-file-name
         (setq-local buffer-save-without-query t))
       (add-hook 'before-save-hook 'lsp-format-buffer nil t))
   #+end_src
   
** treemacs
   #+begin_src emacs-lisp
     (use-package treemacs
       :ensure t
       :defer t
       :init
       (with-eval-after-load 'winum
         (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
       :config
       (progn
         (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
               treemacs-deferred-git-apply-delay        0.5
               treemacs-directory-name-transformer      #'identity
               treemacs-display-in-side-window          t
               treemacs-eldoc-display                   'simple
               treemacs-file-event-delay                2000
               treemacs-file-extension-regex            treemacs-last-period-regex-value
               treemacs-file-follow-delay               0.2
               treemacs-file-name-transformer           #'identity
               treemacs-follow-after-init               t
               treemacs-expand-after-init               t
               treemacs-find-workspace-method           'find-for-file-or-pick-first
               treemacs-git-command-pipe                ""
               treemacs-goto-tag-strategy               'refetch-index
               treemacs-header-scroll-indicators        '(nil . "^^^^^^")
               treemacs-hide-dot-git-directory          t
               treemacs-indentation                     2
               treemacs-indentation-string              " "
               treemacs-is-never-other-window           nil
               treemacs-max-git-entries                 5000
               treemacs-missing-project-action          'ask
               treemacs-move-forward-on-expand          nil
               treemacs-no-png-images                   nil
               treemacs-no-delete-other-windows         t
               treemacs-project-follow-cleanup          nil
               treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
               treemacs-position                        'left
               treemacs-read-string-input               'from-child-frame
               treemacs-recenter-distance               0.1
               treemacs-recenter-after-file-follow      nil
               treemacs-recenter-after-tag-follow       nil
               treemacs-recenter-after-project-jump     'always
               treemacs-recenter-after-project-expand   'on-distance
               treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
               treemacs-show-cursor                     nil
               treemacs-show-hidden-files               t
               treemacs-silent-filewatch                nil
               treemacs-silent-refresh                  nil
               treemacs-sorting                         'alphabetic-asc
               treemacs-select-when-already-in-treemacs 'move-back
               treemacs-space-between-root-nodes        t
               treemacs-tag-follow-cleanup              t
               treemacs-tag-follow-delay                1.5
               treemacs-text-scale                      nil
               treemacs-user-mode-line-format           nil
               treemacs-user-header-line-format         nil
               treemacs-wide-toggle-width               70
               treemacs-width                           35
               treemacs-width-increment                 1
               treemacs-width-is-initially-locked       t
               treemacs-workspace-switch-cleanup        nil)

         ;; The default width and height of the icons is 22 pixels. If you are
         ;; using a Hi-DPI display, uncomment this to double the icon size.
         ;;(treemacs-resize-icons 44)

         (treemacs-follow-mode t)
         (treemacs-filewatch-mode t)
         (treemacs-fringe-indicator-mode 'always)
         (when treemacs-python-executable
           (treemacs-git-commit-diff-mode t))

         (pcase (cons (not (null (executable-find "git")))
                      (not (null treemacs-python-executable)))
           (`(t . t)
            (treemacs-git-mode 'deferred))
           (`(t . _)
            (treemacs-git-mode 'simple)))

         (treemacs-hide-gitignored-files-mode nil))
       :bind
       (:map global-map
             ("M-0"       . treemacs-select-window)
             ("C-x t 1"   . treemacs-delete-other-windows)
             ("C-x t t"   . treemacs)
             ("C-x t d"   . treemacs-select-directory)
             ("C-x t B"   . treemacs-bookmark)
             ("C-x t C-t" . treemacs-find-file)
             ("C-x t M-t" . treemacs-find-tag)))

     (use-package treemacs-projectile
       :after (treemacs projectile)
       :ensure t)

     (use-package treemacs-magit
       :after (treemacs magit)
       :ensure t)
     #+end_src
   
** all the icons
#+begin_src emacs-lisp
    (unless (package-installed-p 'all-the-icons)
      (package-install 'all-the-icons))
#+end_src

** Page break lines
#+begin_src emacs-lisp
  (use-package page-break-lines
    :ensure t
    :config
    (page-break-lines-mode))
#+end_src
** Projectile
#+begin_src emacs-lisp
  (unless (package-installed-p 'projectile)
    (package-install 'projectile))
#+end_src




* LSP
** lsp-mode
   #+begin_src emacs-lisp
     (use-package lsp-mode
       :init
       ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
       (setq lsp-keymap-prefix "C-c l")
       :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
              (rust-mode . lsp)
              (python-mode . lsp)
              (c-mode . lsp)
              
              ;; if you want which-key integration
              (lsp-mode . lsp-enable-which-key-integration))
       :commands lsp)
   #+end_src
** flycheck
   #+begin_src emacs-lisp
     (use-package flycheck
       :ensure t
       :init (global-flycheck-mode))
     (push 'rustic-clippy flycheck-checkers)
   #+end_src
** lsp-ui
   #+begin_src emacs-lisp
     (use-package lsp-ui
       :ensure
       :commands lsp-ui-mode
       :custom
       (lsp-ui-peek-always-show t)
       (lsp-ui-sideline-show-hover t)
       (lsp-ui-doc-enable nil))
   #+end_src
** lsp-treemacs
   #+begin_src emacs-lisp
     (use-package lsp-treemacs
       :commands lsp-treemacs-errors-list
       :config
       (lsp-treemacs-sync-mode 1))
   #+end_src
** dap-mode
   #+begin_src emacs-lisp
     (when (executable-find "lldb-mi")
       (use-package dap-mode
         :ensure
         :config
         (dap-ui-mode 1)
         (dap-ui-controls-mode 1)

         (require 'dap-lldb)
         (require 'dap-gdb-lldb)
         (dap-gdb-lldb-setup)
         (dap-register-debug-template
          "Rust::LLDB Run Configuration"
          (list :type "lldb"
                :request "launch"
                :name "LLDB::Run"
                :gdbpath "rust-lldb"
                ;; uncomment if lldb-mi is not in PATH
                ;; :lldbmipath "path/to/lldb-mi"
                ))))
   #+end_src
      
** company
   #+begin_src emacs-lisp
     (use-package company
       :ensure
       :bind
       (:map company-active-map
                   ("C-n". company-select-next)
                   ("C-p". company-select-previous)
                   ("M-<". company-select-first)
                   ("M->". company-select-last))
       (:map company-mode-map
             ("<tab>". tab-indent-or-complete)
             ("TAB". tab-indent-or-complete)))

     (defun company-yasnippet-or-completion ()
       (interactive)
       (or (do-yas-expand)
           (company-complete-common)))

     (defun check-expansion ()
       (save-excursion
         (if (looking-at "\\_>") t
           (backward-char 1)
           (if (looking-at "\\.") t
             (backward-char 1)
             (if (looking-at "::") t nil)))))

     (defun do-yas-expand ()
       (let ((yas/fallback-behavior 'return-nil))
         (yas/expand)))

     (defun tab-indent-or-complete ()
       (interactive)
       (if (minibufferp)
           (minibuffer-complete)
         (if (or (not yas/minor-mode)
                 (null (do-yas-expand)))
             (if (check-expansion)
                 (company-complete-common)
               (indent-for-tab-command)))))
   #+end_src   

** yasnippet
#+begin_src emacs-lisp
    (use-package yasnippet
          :ensure
          :hook ((lsp-mode . yas-minor-mode))
          :config
          (yas-reload-all)
          (add-hook 'prog-mode-hook 'yas-minor-mode)
          (add-hook 'text-mode-hook 'yas-minor-mode))
    (use-package yasnippet-snippets :ensure)
#+end_src
