* Startup
** performance
#+begin_src emacs-lisp
  (setq gc-cons-threshold (eval-when-compile (* 1024 1024 1024)))
  (setq read-process-output-max (* 1024 1024)) ;; 1mb
  (defun efs/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                      (time-subtract after-init-time before-init-time)))
             gcs-done))

  (setq inhibit-startup-screen t)
  (add-hook 'emacs-startup-hook #'efs/display-startup-time)
#+end_src

** language
#+begin_src emacs-lisp
  (defun font-exists-p (font) (if (null (x-list-fonts font)) nil t))
  (when (window-system)
    (cond ((font-exists-p "FiraCode Nerd Font Mono") (set-frame-font "FiraCode Nerd Font Mono:spacing=100:size=14" nil t))
          ((font-exists-p "FiraCode Nerd Font Mono") (set-frame-font "FiraCode Nerd Font Mono:spacing=100:size=14" nil t))))

  (set-default-coding-systems 'utf-8)     ; Default to utf-8 encoding
  (prefer-coding-system       'utf-8)     ; Add utf-8 at the front for automatic detection.
  (set-terminal-coding-system 'utf-8)     ; Set coding system of terminal output
  (set-keyboard-coding-system 'utf-8)     ; Set coding system for keyboard input on TERMINAL
  (set-language-environment "English")    ; Set up multilingual environment
#+end_src

* Recovery
#+begin_src emacs-lisp
  (setq auto-save-list-file-prefix ; Prefix for generating auto-save-list-file-name
        (expand-file-name ".auto-save-list/.saves-" user-emacs-directory)
        auto-save-default t        ; Auto-save every buffer that visits a file
        auto-save-timeout 20       ; Number of seconds between auto-save
        auto-save-interval 200)    ; Number of keystrokes between auto-saves
#+end_src

* Backup
#+begin_src emacs-lisp
  (setq backup-directory-alist       ; File name patterns and backup directory names.
        `(("." . ,(expand-file-name "backups" user-emacs-directory)))
        make-backup-files t          ; Backup of a file the first time it is saved.
        vc-make-backup-files t       ; No backup of files under version contr
        backup-by-copying t          ; Don't clobber symlinks
        version-control t            ; Version numbers for backup files
        delete-old-versions t        ; Delete excess backup files silently
        kept-old-versions 6          ; Number of old versions to keep
        kept-new-versions 9          ; Number of new versions to keep
        delete-by-moving-to-trash t) ; Delete files to trash
#+end_src


* Interaction
** recentf
#+begin_src emacs-lisp
  (require 'recentf)
  (global-set-key (kbd "C-x C-r") 'ido-recentf-open)
  (setq recentf-max-menu-items 10
        recentf-max-saved-items 100)
  (let (message-log-max)
    (recentf-mode 1))
  (defun ido-recentf-open ()
    "Use `ido-completing-read' to \\[find-file] a recent file"
    (interactive)
    (if (find-file (ido-completing-read "Find recent file: " recentf-list))
        (message "Opening file...")
      (message "Aborting")))
#+end_src
** minad
#+begin_src emacs-lisp
(use-package jinx
  :hook (emacs-startup . global-jinx-mode)
  :bind (("M-$" . jinx-correct)
         ("C-M-$" . jinx-languages)))

  (use-package org-modern :ensure)
  (add-hook 'org-mode-hook #'org-modern-mode)
  (add-hook 'org-agenda-finalize-hook #'org-modern-agenda)

  (use-package vertico
    :ensure
    :init
    (vertico-mode))

  (use-package marginalia
    :ensure
    :bind (:map minibuffer-local-map
                ("M-A" . marginalia-cycle))
    :init
    (marginalia-mode))

  (use-package consult
    :ensure
    :bind (;; C-c bindings in `mode-specific-map'
           ("C-c M-x" . consult-mode-command)
           ("C-c h" . consult-history)
           ("C-c k" . consult-kmacro)
           ("C-c m" . consult-man)
           ("C-c i" . consult-info)
           ([remap Info-search] . consult-info)
           ;; C-x bindings in `ctl-x-map'
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x t b" . consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ;; M-g bindings in `goto-map'
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings in `search-map'
           ("M-s d" . consult-find)                  ;; Alternative: consult-fd
           ("M-s c" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    :hook (completion-list-mode . consult-preview-at-point-mode)
    :init
    (advice-add #'register-preview :override #'consult-register-window)
    (setq register-preview-delay 0.5)
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)
    :config
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     :preview-key '(:debounce 0.4 any))
    (setq consult-narrow-key "<"))
#+end_src

** embark
#+begin_src emacs-lisp
  (use-package embark
    :ensure t
    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'
    :init
    (setq prefix-help-command #'embark-prefix-help-command)
    :config
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  (use-package embark-consult
    :ensure t ; only need to install it, embark loads it after consult if found
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

** UI
#+begin_src emacs-lisp
  (tool-bar-mode -1) ; tool bar
  (menu-bar-mode -1) ; menu bar
  (scroll-bar-mode -1) ; scroll bar
  (global-display-line-numbers-mode) ; line numbers
  (show-paren-mode 1) ; highlights brackets
  (electric-pair-mode 1) ; auto pair
  (setq pixel-scroll-precision-mode 1)
  (setq tab-width 2)
  (setq tab-always-indent 'complete)
  (setq-default cursor-type 'box)
  (setq show-paren-style 'mixed) ; style of bracket highlights
  (setq scroll-conservatively 100) ; smooth scroll
  (setq ring-bell-function 'ignore) ; no annoying sound
  (when window-system (global-hl-line-mode t)) ; colour current line
  (when window-system (global-prettify-symbols-mode t)) ; symbols in gui
  (setq org-startup-indented t)
  (setq org-startup-folded t)

  (use-package dimmer :ensure)
  (setq dimmer-mode t)
#+end_src

** Shortcuts
   
# OPENS TERMINAL
#+begin_src emacs-lisp
  (global-unset-key (kbd "C-z"))
  (defalias 'yes-or-no-p 'y-or-n-p) ; y or n for confirmation
#+end_src

** IDO
#+begin_src emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
;  (global-set-key (kbd "C-x b") 'ibuffer)
;  (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
#+end_src
   
* org-mode
** general
#+begin_src emacs-lisp
  (setq-default org-directory "~/Documents/org"
                org-ellipsis " â€¦"              ; Nicer ellipsis
                org-tags-column 1              ; Tags next to header title
                org-hide-emphasis-markers t    ; Hide markers
                org-cycle-separator-lines 2    ; Number of empty lines between sections
                org-use-tag-inheritance nil    ; Tags ARE NOT inherited
                org-use-property-inheritance t ; Properties ARE inherited
                org-indent-indentation-per-level 2 ; Indentation per level
                org-link-use-indirect-buffer-for-internals t ; Indirect buffer for internal links
                org-fontify-quote-and-verse-blocks t ; Specific face for quote and verse blocks
                org-return-follows-link nil    ; Follow links when hitting return
                org-image-actual-width nil     ; Resize image to window width
                org-indirect-buffer-display 'other-window ; Tab on a task expand it in a new window
                org-outline-path-complete-in-steps nil) ; No steps in path display
#+end_src
** agenda
#+begin_src emacs-lisp
  (bind-key "C-c a" #'org-agenda)


  (setq org-agenda-files (list "~/Documents/org/agenda.org")
        org-agenda-diary-file (expand-file-name "diary" user-emacs-directory))


  (setq org-agenda-window-setup 'current-window
        org-agenda-restore-windows-after-quit t
        org-agenda-show-all-dates nil
        org-agenda-time-in-grid t
        org-agenda-show-current-time-in-grid t
        org-agenda-start-on-weekday 1
        org-agenda-span 7
        org-agenda-hide-tags-regexp "." ; No tags
                                          ; org-agenda-hide-tags-regexp nil) ; All tags
        org-agenda-tags-column 0
                                          ; org-agenda-tags-column -79)      ; Left aling
        org-agenda-block-separator nil
        org-agenda-category-icon-alist nil
        org-agenda-skip-deadline-if-done t
        org-agenda-skip-scheduled-if-done t
        org-agenda-sticky t)

#+end_src



* Packages
** magit
#+begin_src emacs-lisp
  (use-package magit :ensure)
  (use-package transient :ensure)
#+end_src
** ui
#+begin_src emacs-lisp
  (use-package dashboard :ensure
    :config
    (dashboard-setup-startup-hook))
  (setq dashboard-banner-logo-title '"GNU Mikoto Emacs"
        dashboard-startup-banner "~/.emacs.d/splash/emacs.png"
        dashboard-set-file-icons t
        dashboard-center-content t
        dashboard-display-icons-p t
        dashboard-icon-type 'nerd-icons
        dashboard-items '((recents  . 10)
                          (bookmarks . 5)
                          ;; (projects . 5)
                          (agenda . 5)
                          ;;(registers . 5)
                          ))

  (use-package nerd-icons :ensure)
  (use-package all-the-icons :ensure)
  (use-package doom-modeline :ensure
    :config
    (doom-modeline-mode 1))

  (use-package doom-themes
  :ensure t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-gruvbox t)
  (doom-themes-org-config))
#+end_src
** documents
#+begin_src emacs-lisp
  (use-package pdf-tools :ensure
    :defer t
    :magic ("%PDF" . pdf-view-mode)
    :config
    (pdf-tools-install)
    :hook(
          (pdf-tools-enabled . pdf-view-themed-minor-mode)))
  (use-package nov :ensure
    :config
    (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode)))
#+end_src
** which-key
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+end_src

** vertical-ido
#+begin_src emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+end_src
** avy
#+begin_src emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+end_src
** Page break lines
#+begin_src emacs-lisp
  (use-package page-break-lines
    :ensure t
    :config
    (page-break-lines-mode))
#+end_src

* Programming
** Projectile
#+begin_src emacs-lisp
  (use-package projectile :ensure)
#+end_src
** rustic
#+begin_src emacs-lisp
  (use-package rustic :ensure)
  (setq rustic-format-on-save t)
  (setq rustic-lsp-client 'eglot)
#+end_src
** zig-mode
#+begin_src emacs-lisp
  (use-package zig-mode :ensure)
  (add-to-list 'auto-mode-alist '("\\.zig\\'" . zig-mode))
#+end_src
** tree sitter
#+begin_src emacs-lisp
  (use-package tree-sitter :ensure)
  (use-package tree-sitter-langs :ensure)
  (setq global-tree-sitter-mode 1)
#+end_src
** eglot
#+begin_src emacs-lisp
  (add-hook 'python-mode-hook 'eglot-ensure)
  (add-hook 'c-mode-hook 'eglot-ensure)
  (add-hook 'c++-mode-hook 'eglot-ensure)
#+end_src
** helm
#+begin_src emacs-lisp
  (use-package helm :ensure)
#+end_src
** company
#+begin_src emacs-lisp
  (use-package company
    :ensure
    :bind
    (:map company-active-map
          ("C-n". company-select-next)
          ("C-p". company-select-previous)
          ("M-<". company-select-first)
          ("M->". company-select-last))
    (:map company-mode-map
          ("<tab>". tab-indent-or-complete)
          ("TAB". tab-indent-or-complete)))

  (add-hook 'after-init-hook 'global-company-mode t)

  (defun company-yasnippet-or-completion ()
    (interactive)
    (or (do-yas-expand)
        (company-complete-common)))

  (defun check-expansion ()
    (save-excursion
      (if (looking-at "\\_>") t
        (backward-char 1)
        (if (looking-at "\\.") t
          (backward-char 1)
          (if (looking-at "::") t nil)))))

  (defun do-yas-expand ()
    (let ((yas/fallback-behavior 'return-nil))
      (yas/expand)))

  (defun tab-indent-or-complete ()
    (interactive)
    (if (minibufferp)
        (minibuffer-complete)
      (if (or (not yas/minor-mode)
              (null (do-yas-expand)))
          (if (check-expansion)
              (company-complete-common)
            (indent-for-tab-command)))))
#+end_src
** yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet :ensure)
  (use-package yasnippet-snippets :ensure)
#+end_src
